#!/bin/bash

# Robust Alert Sender Script
# Sends comprehensive alert emails to Mailpit for testing the alert summarizer

set -e

# Configuration
MAILPIT_HOST="localhost"
MAILPIT_PORT="1025"
FROM_EMAIL="alerts@ahmad.com"
TO_EMAIL="devops@ahmad.com"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🚨 Comprehensive Alert Sender for Mailpit${NC}"
echo -e "${BLUE}==========================================${NC}"
echo ""

# Function to send email via SMTP
send_alert() {
    local subject="$1"
    local body="$2"
    local from="$3"
    local severity="$4"
    
    echo -e "${YELLOW}📧 Sending: ${subject}${NC}"
    
    # Create email content and send via netcat
    (
        echo "HELO localhost"
        echo "MAIL FROM:<$from>"
        echo "RCPT TO:<$TO_EMAIL>"
        echo "DATA"
        echo "Subject: $subject"
        echo "From: $from"
        echo "To: $TO_EMAIL"
        echo "Date: $(date -R)"
        echo "Content-Type: text/plain"
        echo ""
        echo "ALERT SEVERITY: $severity"
        echo "TIMESTAMP: $(date)"
        echo ""
        echo "$body"
        echo ""
        echo "---"
        echo "Generated by Alert Summarizer Test Suite"
        echo "Timestamp: $(date)"
        echo "."
        echo "QUIT"
    ) | nc $MAILPIT_HOST $MAILPIT_PORT > /dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Alert sent${NC}"
    else
        echo -e "${RED}❌ Failed to send alert${NC}"
    fi
    sleep 2
}

echo -e "${BLUE}Sending comprehensive alerts to $MAILPIT_HOST:$MAILPIT_PORT${NC}"
echo ""

# Critical Alerts
send_alert \
    "🔥 [x] High CPU Usage - Production Server" \
    "Alert: CPU usage has exceeded 90% on production-web-01 for the last 10 minutes.

Details:
- Server: production-web-01
- Current CPU: 95.2%
- Threshold: 90%
- Duration: 10 minutes
- Impact: High

Recommended Actions:
- Check running processes
- Scale horizontally if needed
- Investigate potential memory leaks" \
    "grafana-alerts@ahmad.com" \
    "P1"

send_alert \
    "🚨 [x] Payment Service Unavailable" \
    "Service Alert: Payment processing service is DOWN

Service: payment-processor-service
Status: UNAVAILABLE
Last Successful Check: 5 minutes ago
Response Time: TIMEOUT (>30s)
Expected Response Time: <2s

Impact:
- Customer payments failing
- Revenue impact: HIGH
- Customer experience: x

Immediate Actions Required:
- Check service logs
- Restart service if needed
- Escalate to on-call engineer
- Monitor dependent services" \
    "uptimekube@ahmad.com" \
    "P1"

# High Priority ALERTs
send_alert \
    "⚠️ [ALERT] Elevated Error Rate in Application Logs" \
    "ALERT: Error rate in application logs has increased significantly.

Details:
- Application: payment-api
- Error Rate: 5.2% (normal: <1%)
- Time Period: Last 30 minutes
- Error Types: Database connection timeouts, validation errors

Investigation Required:
- Check database connectivity
- Review recent deployments
- Monitor for further escalation" \
    "kibana-monitoring@ahmad.com" \
    "P2"

send_alert \
    "🔨 [BUILD FAILED] Production Deployment Pipeline Failed" \
    "Build Status: FAILED

Pipeline: production-deployment
Build: 1247
Branch: main
Commit: abc123def456
Duration: 15m 32s

Failure Details:
- Stage: Unit Tests
- Error: 3 test failures in payment module
- Failed Tests: 
  test_payment_validation
  test_refund_processing  
  test_currency_conversion

Action Required:
- Fix failing tests
- Re-run pipeline
- Notify development team" \
    "jenkins@ahmad.com" \
    "P2"

send_alert \
    "⚠️ [ALERT] Database Connection Pool Exhaustion" \
    "Database Alert: Connection pool nearing capacity

Database: production-postgres-01
Current Connections: 485/500 (97%)
Threshold: 90% (450 connections)
Duration: 8 minutes

Pool Stats:
- Active: 485
- Idle: 15
- Max Pool Size: 500
- Wait Time: 2.3s (normal: <0.1s)

Recommendations:
- Monitor for connection leaks
- Consider increasing pool size
- Review long-running queries
- Check application connection handling" \
    "prometheus-alerts@ahmad.com" \
    "P2"

# Medium Priority Issues
send_alert \
    "💾 [ALERT] Low Disk Space on Database Server" \
    "Storage Alert: Disk space running low on database server

Server: db-primary-01
Mount Point: /var/lib/postgresql
Current Usage: 87.3% (used: 436GB, free: 64GB)
Threshold: 85%
Estimated Full: 3 days

Details:
- Database Size: 412GB
- Log Files: 18GB
- Temp Files: 6GB

Action Items:
- Archive old logs
- Clean temporary files
- Plan disk expansion
- Monitor growth rate" \
    "system-monitoring@ahmad.com" \
    "P3"

send_alert \
    "🧠 [ALERT] High Memory Usage on Application Server" \
    "Memory Alert: Application server experiencing high memory usage

Server: app-server-03
Current Memory: 91.2% (used: 29.2GB, total: 32GB)
Threshold: 90%
Duration: 15 minutes

Process Analysis:
- Java Application: 18.5GB (63%)
- Redis Cache: 6.2GB (21%) 
- System: 4.5GB (16%)

Trends:
- Memory usage increasing 2% per hour
- No memory leaks detected
- High load on payment processing

Actions:
- Monitor for OOM conditions
- Consider scaling out
- Review caching strategies" \
    "system-alerts@ahmad.com" \
    "P2"

# Informational Alerts
send_alert \
    "🔐 [INFO] SSL Certificate Expiring Soon" \
    "Certificate Alert: SSL certificate expires in 14 days

Domain: api.ahmad.com
Certificate: Let's Encrypt
Expires: $(date -d '+14 days' '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo 'In 14 days')
Days Remaining: 14
Auto-Renewal: ENABLED

Status:
- Certificate is valid
- Auto-renewal configured
- No action required unless renewal fails

Monitoring:
- Daily checks enabled
- Alerts configured for renewal failures
- Backup certificate available" \
    "ssl-monitor@ahmad.com" \
    "Info"

echo ""
echo -e "${GREEN}🎉 All alerts sent successfully!${NC}"
echo ""
echo -e "${BLUE}Alert Summary:${NC}"
echo -e "- x (P1): 2 alerts"
echo -e "- High (P2): 4 alerts" 
echo -e "- Medium (P3): 1 alert"
echo -e "- Info: 1 alert"
echo -e "- Total: 8 alerts"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo -e "1. Wait 30 seconds for emails to be processed"
echo -e "2. Check Mailpit UI: http://localhost:8025"
echo -e "3. Run: curl -X POST http://localhost:3000/reports/run-daily"
echo -e "4. Check generated report"
echo ""
